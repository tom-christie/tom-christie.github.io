/*
* Atari Arcade SDK
* Developed by gskinner.com in partnership with Atari
* Visit http://atari.com/arcade/developers for documentation, updates and examples.
*
* Copyright (c) Atari Interactive, Inc. All Rights Reserved. Atari and the Atari logo are trademarks owned by Atari Interactive, Inc.
*
* Distributed under the terms of the MIT license.
* http://www.opensource.org/licenses/mit-license.html
*
* This notice shall be included in all copies or substantial portions of the Software.
*/

/** @module Atari */
(function(scope) {

	/**
	 * The GameShell initializes the creation of a game instance. The shell is responsible for:
	 * <ul>
	 *     <li>Loading the game list manifest</li>
	 *     <li>Loading the individual game manifest</li>
	 *     <li>Creating the container &lt;iframe&gt;</li>
	 * </ul>
	 * @class GameShell
	 */
	function GameShell() {}

	var s = GameShell;

	/**
	 * The content window of the iframe instance
	 * @property window
	 * @type HTMLDOMWindow
	 * @static
	 * @protected
	 */
	s.window = null; // The document window for games

	/**
	 * The content body of the iframe instance
	 * @property body
	 * @type HTMLDOMBody
	 * @static
	 * @protected
	 */
	s.body = null; // The document body for game

	/**
	 * The iframe instance that the game is loaded into
	 * @property frame
	 * @type HTMLIframeElement
	 * @static
	 * @protected
	 */
	s.frame = null; // The game iframe

	/**
	 * The template path that will be loaded into an iframe, which bootstraps the game.
	 * @property templatePath
	 * @type {String}
	 */
	s.templatePath = null;

	s.gameId = null;
	s.baseUrl = null;

	//TODO: Docs
	s.manifest = null; // All games manifest
	s.currentGameManifest = null; // The manifest for the current game

	s.gameInfo = null;
	s.gameRoom = null;

	s.mediator = null;

	s.multiPlayerGame = null;

	s.muted = false;
	s.audioDisabled = false;

	/**
	 * The game is ready to play. This provides the site/framework an opportunity
	 * to do something before calling <b>startGame</b>, such as show a pre-roll ad.
	 * @event gameReady
	 * @protected
	 */
	s.onGameReady = null;

	/**
	 * The game has dispatched an event using pre-defined set of callbacks.
	 * @event onGameEvent
	 */
	s.onGameEvent = null;

	s.defaultManifest = null;

	/**
	 * The game is currently preloading.
	 * @event onGameProgress
	 * @param {Object} event An event object generated by PreloadJS.
	 */
	s.onGameProgress = null;

	/**
	 * Initialize the game shell.
	 * @method initialize
	 * @param {String} baseUrl The relative path to the root of the HTML file. The default value is ".".
	 * @static
	 */
	s.initialize = function(baseUrl) {
		document.onkeydown = s.throttleEvent;
		document.onkeyup = s.throttleEvent;

		//window.addEventListener("message", Atari.proxy(s.receiveMessage, s), false);

		// Prevent iOS page moving:
		document.ontouchmove = function(event) {
			event.stopPropagation();
			event.preventDefault();
		};
		s.baseUrl = baseUrl || "";

		if (s.manifest == null) {
			// Load the core manifest
			s.loadFile([baseUrl + "games/GameManifest.json?no="+new Date().getTime()], s.handleGameList);
		} else {
			s.onManifestLoaded && s.onManifestLoaded(s.manifest);
		}
	}

	/**
	 * The game list is loaded.
	 * @method handleGameList
	 * @param event
	 * @static
	 * @protected
	 */
	s.handleGameList = function(event) {
		s.manifest = Atari.parseJSON(event.result);
		if (s.onManifestLoaded) { s.onManifestLoaded(s.manifest); }
	}

	/**
	 * Key events caught by the framework are passed into the active game, so that focus never has to be
	 * set back on the iframe instance.
	 * @method throttleEvent
	 * @param {Object} event The event object generated by the key press/release.
	 * @protected
	 * @static
	 */
	s.throttleEvent = function(event) {
        if(event.type == "keyup" || event.type == "keydown"){
            if (s.window != null && s.window.GameLibs != null && s.window.GameLibs.GamePad != null) {
                //s.window.GameLibs.GamePad.onExternalEvent(event);
            }
        }
	}

	/**
	 * The site has been toggled. Usually when a tab changes. The site is responsible for this.
	 * @method toggleVisibility
	 * @param {Boolean} visible If the site is visible or not
	 */
	s.toggleVisibility = function(visible) {
		s.mediator.toggleVisibility(visible);
	}

	/**
	 * Setup a game instance. This method downloads the manifest, and preloads any
	 * assets needed to display the "start screen". Once complete, the <b>onGameSetup</b>
	 * callback is fired.
	 * @method setupGame
	 * @param {String} gameId The id of the game, specified in the game manifest.
	 * @static
	 */
	s.setupGame = function(gameId) {
		if (s.manifest == null) {
			throw("Game Manifest not loaded.")
		}
		s.gameId = gameId;

		if (s.frame != null) {
			s.cleanUp();
		}

		// Load the manifest for the single game.
        var url = s.manifest[s.gameId].base + "manifest.json";
		s.loadFile([s.baseUrl + url], s.handleGameManifest);
	}

	/**
	 * Clean up the old game instance. This clears references out so that garbage collection
	 * can clear the game reference.
	 * @method cleanUp
	 */
	s.cleanUp = function() {
		if (s.mediator != null) {
			//Try catch this, or Safari freaks out when running in the site.
			try {
				s.mediator.cleanUp();
			} catch (e) { }
			s.mediator = null;
		}

		if (s.relay != null) {
			s.relay.cleanUp();
			s.relay = null;
		}

		s.multiPlayerGame = null;
		s.gameInfo = null;
		s.currentGameManifest = null;

		s.window = null;
		s.body = null;

		$(s.frame).remove();
		s.frame = null;
		s.relay = null;
	}

	/**
	 * The individual game manifest has loaded. Load all start screen assets, and
	 * complete setup.
	 * @method handleGameManifest
	 * @param {Object} event
	 * @protected
	 * @static
	 */
	s.handleGameManifest = function(event) {
		var manifest = this.currentGameManifest = Atari.parseJSON(event.result);
		manifest.base = s.manifest[s.gameId].base;

		if (s.onGameSetup) {
			s.onGameSetup(manifest);
		}
	}

	/**
	 * Create a game instance. This creates the container IFRAME, and initiates the
	 * template injection.
	 * @method createGame
	 * @param {DOMElement} Where on the document should the the iFrame should be placed.
	 * @static
	 */
	s.createGame = function(parent) {
		var frame = s.frame = document.createElement("iframe");
		frame.id = "gameFrame";
		frame.width = 1024;
		frame.height = 622;
		frame.scrolling = "no";
		frame.ALLOWTRANSPARENCY = true;

		if (window.InputRelay) {
			s.relay = new InputRelay(frame, true, true, true);
		}

		parent.appendChild(frame);

		s.window = frame.contentWindow;

		if (s.template != null) {
			s.injectTemplate();
		} else {
			s.loadFile([s.baseUrl + s.templatePath], s.templateLoaded);
		}
	}

	/**
	 * The HTML template has loaded. This only happens once, and the template is cached.
	 * @method templateLoaded
	 * @param {Object} event
	 * @static
	 * @protected
	 */
	s.templateLoaded = function(event) {
		s.template = event.result;
		s.injectTemplate();
	}

	/**
	 * Inject the loaded game manifest data into the current HTML template.
	 * @method injectTemplate
	 * @static
	 * @protected
	 */
	s.injectTemplate = function() {
		var html = GameLibs.StringUtils.supplant(s.template, {
			GAME_ID: s.gameId,
			BASE_URL: s.baseUrl
		});

		// Write the document
		var doc = s.frame.contentDocument;
		doc.open();
		doc.write(html);
		doc.close();
	}

	/**
	 * Register the GameMediator that will marshal communication between the game shell
	 * and the game instance. The mediator enables:
	 * <ol>
     *     <li>The GameShell to call methods on to the game instance (pause, reset, etc)</li>
     *     <li>The game instance to make callbacks on the GameShell (levelComplete, gameComplete, etc)</li>
	 * </ol>
	 * @method registerMediator
	 * @param {GameMediator} mediator The GameMediator instance for the current game.
	 * @static
	 */
	s.registerMediator = function(mediator) {
		s.mediator = mediator;
		mediator.onGameProgress = Atari.proxy(s.handleGameProgress, s);
		mediator.onGameReady = Atari.proxy(s.handleGameReady, s);
		mediator.onGameEvent = Atari.proxy(s.handleGameEvent, s);

		// Set the game audio to match the system audio
		mediator.setMute(this.muted);
	}

	/**
	 * Mute the entire framework. This ensures the games are also muted.
	 * @method setMute
	 * @param {Boolean} muted Whether the system should be muted or not.
	 * @static
	 */
	s.setMute = function(muted) {
		if (muted == null) { muted = false; }
		this.muted = muted;
		if (window.createjs == null) { return; }
		createjs.SoundJS.setMute(muted); // Mute the system audio
		if (s.mediator != null) {
			s.mediator.setMute(muted); // Mute the game audio
		}
	}

	/**
	 * The game has received progress events from the GameMediator, meaning the
	 * game is preloading.
	 * @method handleGameProgress
	 * @param {Object} event A progress event from PreloadJS
	 * @protected
	 * @static
	 */
	s.handleGameProgress = function(event) {
		if (s.onGameProgress != null) { s.onGameProgress(event); }
	}

	/**
	 * The game is ready to be started. All assets are preloaded, and the site can
	 * start it when ready.
	 * @method handleGameReady
	 * @static
	 * @protected
	 */
	s.handleGameReady = function() {
		// Tell the site we are ready.
		if (s.onGameReady != null) { s.onGameReady(); }
	}

	/**
	 * Initialize the game.
	 * @method initializeGame
	 * @param {GameInfo} gameInfo GameInfo containing the game details
	 * @param {MultiPlayerGame} mpg The current multiplayer game.
	 */
	s.initializeGame = function(gameInfo, mpg) {
		s.frame.width = gameInfo.width * gameInfo.scaleFactor;
		s.frame.height = gameInfo.height * gameInfo.scaleFactor;

		s.gameInfo = gameInfo;
		s.multiPlayerGame = mpg;
		s.mediator.initializeGame(s, mpg);
	}

	/**
	 * Start playing the game. The framework/site uses this to begin gameplay
	 * on a game that is finished preloading and/or ready for multiplayer gameplay.
	 * @method startGame
	 * @static
	 */
	s.startGame = function() {
		s.mediator.command(Atari.GameMediator.START_GAME);
		//s.window.postMessage({command:Atari.GameMediator.START_GAME});
	}

	/**
	 * Kills a game. The framework/site uses this to kill a game, for example if too many players drop off from multiplayer.
	 * @method destroyGame
	 * @static
	 */
	s.destroyGame = function() {
		s.mediator.command(Atari.GameMediator.DESTROY_GAME);
		//s.window.postMessage({command:Atari.GameMediator.START_GAME});
	}

	/**
	 * A player has been disconnected from multiplayer, remove them from the game.
	 * @method removePlayer
	 * @static
	 */
	s.removePlayer = function(playerId) {
		s.mediator.command(Atari.GameMediator.REMOVE_PLAYER, playerId);
	}


	/**
	 * Utility method to load a file, and automatically scope the methods.
	 * @method loadFile
	 * @param {String} path The path to load
	 * @param {Function} fileHandler The method to call when each file loads
	 * @param {Function} completeHandler The method to call when complete
	 * @static
	 * @protected
	 */
	s.loadFile = function(path, fileHandler, completeHandler) {
		var loader = s.preloader;
		if (loader == null) { loader = s.preloader = new createjs.PreloadJS(); }
		if (fileHandler) {
			loader.onFileLoad = Atari.proxy(fileHandler, s);
		} else {
			loader.onFileLoad = null;
		}
		if (completeHandler) {
			loader.onComplete = Atari.proxy(completeHandler, s);
		} else {
			loader.onComplete = null;
		}
		loader.onError = Atari.proxy(s.loadError, s);
		loader.maintainScriptOrder = true;
		loader.loadManifest(path); // Supports both single file and array
	}

	s.loadError = function(event) {
		// Nothing yet.
	}

	/**
	 * Commands from the GameMediator fire this handler, unless another class overrides the gameReady() handler.
	 * NOTE: THIS METHOD WILL DISAPPEAR OR BE OVERRIDDEN
	 * @method gameEvent
	 * @param eventName
	 * @param args
	 * @private
	 */
	s.handleGameEvent = function(eventName, args) {
		//Atari.trace("Game says:", eventName);

		var mediator = Atari.GameMediator;
		var m = this.mediator;
		var scoreData;

		switch(eventName) {
			case mediator.GAME_OVER:
				scoreData = this.mediator.command(mediator.GET_SCORE);
				if (confirm(GameLibs.StringUtils.supplant("You lost.\n\nAt least you got {SCORE} points!\n\nWould you like to continue?",
						{SCORE:scoreData.score}))) {
					setTimeout(function() {
						m.command(mediator.CONTINUE_GAME, {keepPoints:false});
					}, 50);
				} else {
					setTimeout(function() {
						m.command(mediator.RESTART_GAME);
					}, 50);
				}
				break;
			case mediator.GAME_COMPLETE:
				scoreData = this.mediator.command(mediator.GET_SCORE);
				alert(GameLibs.StringUtils.supplant("You Won! And you got {SCORE} points!\n\nClick to play again",
						{SCORE:scoreData.score}));
				setTimeout(function() {
					m.command(mediator.RESTART_GAME);
				}, 50);
				break;
			case mediator.GAME_ERROR:
				alert(args);
				break;
		}

		return;

	}
	scope.GameShell = GameShell;

}(window.Atari))
