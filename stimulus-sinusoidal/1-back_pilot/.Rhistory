quit()
jags
jags
x = 5
seq(2,34,4)
cd Courses
pwd
RunningProportion.R(4)
sample(5)
help('sample')
runprop , type="o" , log="x" ,
plot( n , runprop , type="o" , log="x" ,
plot( n , runprop , type="o" , log="x" ,\
xlim=c(1,N) , ylim=c(0.0,1.0) , cex.axis=1.5 ,
xlab="Flip Number" , ylab="Proportion Heads" , cex.lab=1.5 ,
xlab="Flip Number" , ylab="Proportion Heads" , cex.lab=1.5 , \
main="Running Proportion of Heads" , cex.main=1.5 )
plot(n)
N=500
flipsequence = sample( x=c(0,1) , prob=c(.5,.5) , size=N , replace=TRUE )
r = cumsum( flipsequence )
n=1:N
runprop = r / N
plot( n , runprop , type="o" , log="x" ,\
xlim=c(1,N) , ylim=c(0.0,1.0) , cex.axis=1.5 ,\
xlab="Flip Number" , ylab="Proportion Heads" , cex.lab=1.5 , \
main="Running Proportion of Heads" , cex.main=1.5 )
plot( n , runprop , type="o" , log="x" ,\
xlim=c(1,N) , ylim=c(0.0,1.0) , cex.axis=1.5 ,\
xlab="Flip Number" , ylab="Proportion Heads" , cex.lab=1.5 , \
main="Running Proportion of Heads"  )
xlab="Flip Number" , ylab="Proportion Heads" , cex.lab=1.5 )
plot( n , runprop , type="o" , log="x" ,
xlim=c(1,N) , ylim=c(0.0,1.0) , cex.axis=1.5 ,
xlab="Flip Number" , ylab="Proportion Heads" , cex.lab=1.5 ,
main="Running Proportion of Heads" , cex.main=1.5 )
flipsequence = sample( x=c(0,1) , prob=c(.5,.5) , size=N , replace=TRUE )
# Modify the coin flipping program in Section 3.5.1
#(RunningProportion.R) to simulate a biased coin that has p(H) = .8.
#Change the height of the reference line in the plot to match p(H).
#Comment your code. Hint: Read the help for sample.
N=500
flipsequence = sample( x=c(0,1) , prob=c(.5,.5) , size=N , replace=TRUE )
r = cumsum( flipsequence )
n=1:N
runprop = r / N
plot( n , runprop , type="o" , log="x" ,
xlim=c(1,N) , ylim=c(0.0,1.0) , cex.axis=1.5 ,
xlab="Flip Number" , ylab="Proportion Heads" , cex.lab=1.5 ,
main="Running Proportion of Heads" , cex.main=1.5 )
lines( c(1,N) , c(.5,.5) , lty=3 )
flipletters = paste( c("T","H")[ flipsequence[ 1:10 ] + 1 ] , collapse="" )
displaystring = paste( "Flip Sequence = " , flipletters , "..." , sep="" )
text( 5 , .9 , displaystring , adj=c(0,1) , cex=1.3 )
# Modify the coin flipping program in Section 3.5.1
#(RunningProportion.R) to simulate a biased coin that has p(H) = .8.
#Change the height of the reference line in the plot to match p(H).
#Comment your code. Hint: Read the help for sample.
N=500
flipsequence = sample( x=c(0,1) , prob=c(.5,.5) , size=N , replace=TRUE )
r = cumsum( flipsequence )
n=1:N
runprop = r / N
plot( n , runprop , type="o" , log="x" ,
xlim=c(1,N) , ylim=c(0.0,1.0) , cex.axis=1.5 ,
xlab="Flip Number" , ylab="Proportion Heads" , cex.lab=1.5 ,
main="Running Proportion of Heads" , cex.main=1.5 )
lines( c(1,N) , c(.5,.5) , lty=3 )
flipletters = paste( c("T","H")[ flipsequence[ 1:10 ] + 1 ] , collapse="" )
displaystring = paste( "Flip Sequence = " , flipletters , "..." , sep="" )
text( 5 , .9 , displaystring , adj=c(0,1) , cex=1.3 )
text( N , .3 , paste("End Proportion =",runprop[N]) , adj=c(1,0) , cex=1.3 )
r
N
# Modify the coin flipping program in Section 3.5.1
#(RunningProportion.R) to simulate a biased coin that has p(H) = .8.
#Change the height of the reference line in the plot to match p(H).
#Comment your code. Hint: Read the help for sample.
N=500
flipsequence = sample( x=c(0,1) , prob=c(.5,.5) , size=N , replace=TRUE )
r = cumsum( flipsequence )
n=1:N
runprop = r / n
plot( n , runprop , type="o" , log="x" ,
xlim=c(1,N) , ylim=c(0.0,1.0) , cex.axis=1.5 ,
xlab="Flip Number" , ylab="Proportion Heads" , cex.lab=1.5 ,
main="Running Proportion of Heads" , cex.main=1.5 )
lines( c(1,N) , c(.5,.5) , lty=3 )
flipletters = paste( c("T","H")[ flipsequence[ 1:10 ] + 1 ] , collapse="" )
displaystring = paste( "Flip Sequence = " , flipletters , "..." , sep="" )
text( 5 , .9 , displaystring , adj=c(0,1) , cex=1.3 )
text( N , .3 , paste("End Proportion =",runprop[N]) , adj=c(1,0) , cex=1.3 )
# Modify the coin flipping program in Section 3.5.1
#(RunningProportion.R) to simulate a biased coin that has p(H) = .8.
#Change the height of the reference line in the plot to match p(H).
#Comment your code. Hint: Read the help for sample.
N=500
flipsequence = sample( x=c(0,1) , prob=c(.8,.2) , size=N , replace=TRUE )
r = cumsum( flipsequence )
n=1:N
runprop = r / n
plot( n , runprop , type="o" , log="x" ,
xlim=c(1,N) , ylim=c(0.0,1.0) , cex.axis=1.5 ,
xlab="Flip Number" , ylab="Proportion Heads" , cex.lab=1.5 ,
main="Running Proportion of Heads" , cex.main=1.5 )
lines( c(1,N) , c(.5,.5) , lty=3 )
flipletters = paste( c("T","H")[ flipsequence[ 1:10 ] + 1 ] , collapse="" )
displaystring = paste( "Flip Sequence = " , flipletters , "..." , sep="" )
text( 5 , .9 , displaystring , adj=c(0,1) , cex=1.3 )
text( N , .3 , paste("End Proportion =",runprop[N]) , adj=c(1,0) , cex=1.3 )
# Modify the coin flipping program in Section 3.5.1
#(RunningProportion.R) to simulate a biased coin that has p(H) = .8.
#Change the height of the reference line in the plot to match p(H).
#Comment your code. Hint: Read the help for sample.
N=500
flipsequence = sample( x=c(0,1) , prob=c(.2,.8) , size=N , replace=TRUE )
r = cumsum( flipsequence )
n=1:N
runprop = r / n
plot( n , runprop , type="o" , log="x" ,
xlim=c(1,N) , ylim=c(0.0,1.0) , cex.axis=1.5 ,
xlab="Flip Number" , ylab="Proportion Heads" , cex.lab=1.5 ,
main="Running Proportion of Heads" , cex.main=1.5 )
lines( c(1,N) , c(.5,.5) , lty=3 )
flipletters = paste( c("T","H")[ flipsequence[ 1:10 ] + 1 ] , collapse="" )
displaystring = paste( "Flip Sequence = " , flipletters , "..." , sep="" )
text( 5 , .9 , displaystring , adj=c(0,1) , cex=1.3 )
text( N , .3 , paste("End Proportion =",runprop[N]) , adj=c(1,0) , cex=1.3 )
# Consider a spinner with a [0,1] scale on its circumference. #Suppose that the spinner is slanted or magnetized or bent in some#way such that it is biased, and its probability density function is #p(x) = 6x(1 − x) over the interval x ∈ [0, 1].#(A) Adapt the code from Section 3.5.2 (IntegralOfDensity.R) to plot #this density func- tion and approximate its integral. Comment your code. #Be careful to consider values of x only in the interval [0, 1]. #Hint: You can omit the first couple lines regarding meanval and sdval, #because those parameter values pertain only to the normal distribution. #Then set xlow=0 and xhigh=1.#(B) Derive the exact integral using calculus. Hint: See the example, Equation 3.7. (C) Does this function satisfy Equation 3.3?#(D) From inspecting the graph, what is the maximal value of p(x)?# Graph of normal probability density function, with comb of intervals.meanval = 0.0sdval = 0.2xlow = meanval - 3*sdvalxhigh = meanval + 3*sdvaldx = 0.02# Specify comb points along the x axis:x=seq(from=xlow,to=xhigh,by=dx)# Compute y values, i.e., probability density at each value of x:y = ( 1/(sdval*sqrt(2*pi)) ) * exp( -.5 * ((x-meanval)/sdval)ˆ2 )# Plot the function. "plot" draws the intervals. "lines" draws the bell curve.plot( x , y , type="h" , lwd=1 , cex.axis=1.5, xlab="x" , ylab="p(x)" , cex.lab=1.5 , main="Normal Probability Density" , cex.main=1.5 )lines(x,y)# Approximate the integral as the sum of width * height for each interval.area=sum(dx*y)
# Consider a spinner with a [0,1] scale on its circumference. #Suppose that the spinner is slanted or magnetized or bent in some#way such that it is biased, and its probability density function is #p(x) = 6x(1 − x) over the interval x ∈ [0, 1].#(A) Adapt the code from Section 3.5.2 (IntegralOfDensity.R) to plot #this density func- tion and approximate its integral. Comment your code. #Be careful to consider values of x only in the interval [0, 1]. #Hint: You can omit the first couple lines regarding meanval and sdval, #because those parameter values pertain only to the normal distribution. #Then set xlow=0 and xhigh=1.#(B) Derive the exact integral using calculus. Hint: See the example, Equation 3.7. (C) Does this function satisfy Equation 3.3?#(D) From inspecting the graph, what is the maximal value of p(x)?# Graph of normal probability density function, with comb of intervals.meanval = 0.0sdval = 0.2xlow = meanval - 3*sdvalxhigh = meanval + 3*sdvaldx = 0.02# Specify comb points along the x axis:x=seq(from=xlow,to=xhigh,by=dx)# Compute y values, i.e., probability density at each value of x:y = ( 1/(sdval*sqrt(2*pi)) ) * exp( -.5 * ((x-meanval)/sdval)ˆ2 )# Plot the function. "plot" draws the intervals. "lines" draws the bell curve.plot( x , y , type="h" , lwd=1 , cex.axis=1.5 , xlab="x" , ylab="p(x)" ,       cex.lab=1.5 , main="Normal Probability Density" , cex.main=1.5 )lines(x,y)# Approximate the integral as the sum of width * height for each interval.area=sum(dx*y)
meanval = 0.0sdval = 0.2xlow = meanval - 3*sdvalxhigh = meanval + 3*sdvaldx = 0.02
meanval = 0.0sdval = 0.2xlow = meanval - 3*sdvalxhigh = meanval + 3*sdvaldx = 0.02
meanval = 0.0
sdval = 0.2
xhigh = meanval + 3*sdval
dx = 0.02
xlow = meanval - 3*sdval
xhigh = meanval + 3*sdval
dx = 0.02
# Specify comb points along the x axis:
x=seq(from=xlow,to=xhigh,by=dx)
# Compute y values, i.e., probability density at each value of x:
y = ( 1/(sdval*sqrt(2*pi)) ) * exp( -.5 * ((x-meanval)/sdval)ˆ2 )
y = ( 1/(sdval*sqrt(2*pi)) ) * exp( -.5 * ((x-meanval)/sdval)^2 )
# Plot the function. "plot" draws the intervals. "lines" draws the bell curve.
plot( x , y , type="h" , lwd=1 , cex.axis=1.5 , xlab="x" , ylab="p(x)" ,
cex.lab=1.5 , main="Normal Probability Density" , cex.main=1.5 )
lines(x,y)
# Approximate the integral as the sum of width * height for each interval.
area=sum(dx*y)
y = 6*x*(1-x)
# Plot the function. "plot" draws the intervals. "lines" draws the bell curve.
plot( x , y , type="h" , lwd=1 , cex.axis=1.5 , xlab="x" , ylab="p(x)" ,
cex.lab=1.5 , main="Normal Probability Density" , cex.main=1.5 )
xlow = 0
#xhigh = meanval + 3*sdval
xhigh = 1
dx = 0.02
# Specify comb points along the x axis:
x=seq(from=xlow,to=xhigh,by=dx)
# Compute y values, i.e., probability density at each value of x:
#y = ( 1/(sdval*sqrt(2*pi)) ) * exp( -.5 * ((x-meanval)/sdval)^2 )
y = 6*x*(1-x)
# Plot the function. "plot" draws the intervals. "lines" draws the bell curve.
plot( x , y , type="h" , lwd=1 , cex.axis=1.5 , xlab="x" , ylab="p(x)" ,
cex.lab=1.5 , main="Normal Probability Density" , cex.main=1.5 )
lines(x,y)
source('~/ex3.3.R', echo=TRUE)
r
r[1]
r[2]
r[9]
rdirichlet
install.packages("dplyr")
dplyr
library(dplyr)
library(dplyr)
install.packages("Rcpp")
library(dplyr)
p =ggplot(data[data$response_time < 1500, ], aes(response_time, fill=blood.sugar)) +
ggsave(p, file= "test.png"),  width=12, height=8)
ggsave(p, file= "test.png",  width=12, height=8)
p =ggplot(data[data$response_time < 1500, ], aes(response_time, fill=blood.sugar)) +
geom_histogram(alpha = 0.5, aes(y = ..density..), position = 'identity', binwidth=50) +
ggtitle(paste("response times as a function of blood sugar\nwith response_prob = ", as.character(i)))  +
xlim(0, 1600)  +
ylim(0, .006) +
facet_wrap(data$prob_same)
library(ggplot2)
p =ggplot(data[data$response_time < 1500, ], aes(response_time, fill=blood.sugar)) +
geom_histogram(alpha = 0.5, aes(y = ..density..), position = 'identity', binwidth=50) +
ggtitle(paste("response times as a function of blood sugar\nwith response_prob = ", as.character(i)))  +
xlim(0, 1600)  +
ylim(0, .006) +
facet_wrap(data$prob_same)
library(ggplot2)
data = read.csv('../data/results_formatted_calvin.csv', header=TRUE)
setwd("/Volumes/Data/git/cognitive_cost/deliberation_experiment/stimulus_js/1-back_pilot")
